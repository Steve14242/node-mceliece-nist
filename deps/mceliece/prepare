#!/bin/bash
set -e

# Extract the reference implementation.
archive=mceliece-20190331
tar -xf $archive.tar.gz $archive/Reference_Implementation/kem/ --strip-components=2

prepare_algorithm() {
  add_header $1
  add_gyp $1
  patch_files $1
}

add_header() {
  id=$1
  echo "#include \"kem/$id/crypto_kem_$id.h\"" >> mceliece.h
}

add_gyp() {
  id=$1

  variables=("apply_benes=pqcrypto_kem_${id}_impl_priv_apply_benes" "bitrev=pqcrypto_kem_${id}_impl_priv_bitrev" "bm=pqcrypto_kem_${id}_impl_priv_bm" "controlbits=pqcrypto_kem_${id}_impl_priv_controlbits" "decrypt=pqcrypto_kem_${id}_impl_priv_decrypt" "encrypt=pqcrypto_kem_${id}_impl_priv_encrypt" "eval=pqcrypto_kem_${id}_impl_priv_eval" "gf_add=pqcrypto_kem_${id}_impl_priv_gf_add" "gf_frac=pqcrypto_kem_${id}_impl_priv_gf_frac" "gf_inv=pqcrypto_kem_${id}_impl_priv_gf_inv" "gf_iszero=pqcrypto_kem_${id}_impl_priv_gf_iszero" "gf_mul=pqcrypto_kem_${id}_impl_priv_gf_mul" "GF_mul=pqcrypto_kem_${id}_impl_priv_GF_mul" "load2=pqcrypto_kem_${id}_impl_priv_load2" "load8=pqcrypto_kem_${id}_impl_priv_load8" "perm_conversion=pqcrypto_kem_${id}_impl_priv_perm_conversion" "pk_gen=pqcrypto_kem_${id}_impl_priv_pk_gen" "root=pqcrypto_kem_${id}_impl_priv_root" "sk_part_gen=pqcrypto_kem_${id}_impl_priv_sk_part_gen" "sort_63b=pqcrypto_kem_${id}_impl_priv_sort_63b" "store2=pqcrypto_kem_${id}_impl_priv_store2" "store8=pqcrypto_kem_${id}_impl_priv_store8" "support_gen=pqcrypto_kem_${id}_impl_priv_support_gen" "synd=pqcrypto_kem_${id}_impl_priv_synd" "syndrome=pqcrypto_kem_${id}_impl_priv_syndrome" "transpose_64x64=pqcrypto_kem_${id}_impl_priv_transpose_64x64" "load4=pqcrypto_kem_${id}_impl_priv_load4" "handleErrors=pqcrypto_kem_${id}_impl_priv_handleErrors" "perm_check=pqcrypto_kem_${id}_impl_priv_perm_check" "genpoly_gen=pqcrypto_kem_${id}_impl_priv_genpoly_gen")
  externals=("randombytes" "aes256ctr")

  (
    echo "    {"
    echo "      'target_name': 'only_$id',"
    echo "      'type': 'static_library',"
    echo "      'sources': ["
    find kem/$id -maxdepth 1 -type f -name '*.c' | grep -v 'aes256ctr' | sort | while read source; do
      echo "        '$source',"
    done
    echo "      ],"
    echo "      'defines': ["
    for def in ${variables[@]}; do
      echo "        '$def',"
    done
    for ext in ${externals[@]}; do
      echo "        '$ext=pqcrypto_mceliece_$ext',"
    done
    echo "      ],"
    echo "      'cflags': ['-fPIC']"
    echo "    },"
  ) >> binding.gyp
}

patch_files() {
  id=$1

  rm -rf kem/$id/nist kem/$id/aes256ctr.*
  find kem/$id -type f \( -name '*.c' -o -name '*.h' \) | while read source; do
    sed -i 's=<libkeccak\.a\.headers/KeccakSpongeWidth1600\.h>="../../mceliece_externals.h"=g; s="nist/rng.h"="../../mceliece_externals.h"=g; s="aes256ctr.h"="../../mceliece_externals.h"=g' $source
  done
}

rm -f mceliece.h

implementations=`ls -1 kem | while read id; do if [ -d "kem/$id" ]; then echo $id; fi; done | sort`
(
  echo "{"
  echo "  'targets': ["
  echo "    {"
  echo "      'target_name': 'mceliece',"
  echo "      'type': 'none',"
  echo "      'dependencies': ["
  for impl in $implementations; do
    echo "        'only_$impl',"
  done
  echo "      ]"
  echo "    },"
) > binding.gyp

for id in $implementations; do
  prepare_algorithm $id
done

(
  echo "  ]"
  echo "}"
) >> binding.gyp
