#!/bin/bash
set -e

build_dir=../../wasm
obj_dir=$build_dir/obj

compile_algorithm() {
  id=$1
  echo "Compiling $id"

  variables="-Dapply_benes=pqcrypto_kem_${id}_impl_priv_apply_benes -Dbitrev=pqcrypto_kem_${id}_impl_priv_bitrev -Dbm=pqcrypto_kem_${id}_impl_priv_bm -Dcontrolbits=pqcrypto_kem_${id}_impl_priv_controlbits -Ddecrypt=pqcrypto_kem_${id}_impl_priv_decrypt -Dencrypt=pqcrypto_kem_${id}_impl_priv_encrypt -Deval=pqcrypto_kem_${id}_impl_priv_eval -Dgf_add=pqcrypto_kem_${id}_impl_priv_gf_add -Dgf_frac=pqcrypto_kem_${id}_impl_priv_gf_frac -Dgf_inv=pqcrypto_kem_${id}_impl_priv_gf_inv -Dgf_iszero=pqcrypto_kem_${id}_impl_priv_gf_iszero -Dgf_mul=pqcrypto_kem_${id}_impl_priv_gf_mul -DGF_mul=pqcrypto_kem_${id}_impl_priv_GF_mul -Dload2=pqcrypto_kem_${id}_impl_priv_load2 -Dload8=pqcrypto_kem_${id}_impl_priv_load8 -Dperm_conversion=pqcrypto_kem_${id}_impl_priv_perm_conversion -Dpk_gen=pqcrypto_kem_${id}_impl_priv_pk_gen -Droot=pqcrypto_kem_${id}_impl_priv_root -Dsk_part_gen=pqcrypto_kem_${id}_impl_priv_sk_part_gen -Dsort_63b=pqcrypto_kem_${id}_impl_priv_sort_63b -Dstore2=pqcrypto_kem_${id}_impl_priv_store2 -Dstore8=pqcrypto_kem_${id}_impl_priv_store8 -Dsupport_gen=pqcrypto_kem_${id}_impl_priv_support_gen -Dsynd=pqcrypto_kem_${id}_impl_priv_synd -Dsyndrome=pqcrypto_kem_${id}_impl_priv_syndrome -Dtranspose_64x64=pqcrypto_kem_${id}_impl_priv_transpose_64x64 -Dload4=pqcrypto_kem_${id}_impl_priv_load4 -DhandleErrors=pqcrypto_kem_${id}_impl_priv_handleErrors -Dperm_check=pqcrypto_kem_${id}_impl_priv_perm_check -Dgenpoly_gen=pqcrypto_kem_${id}_impl_priv_genpoly_gen"

  find kem/$id -type f -name '*.c' | while read source; do
    target=$obj_dir/${source%.c}.bc
    echo "  $source -> $target"
    mkdir -p `dirname $target`
    emcc -std=c11 -Oz -fvisibility=default $variables -c $source -o $target
  done
}

implementations=`ls -1 kem | while read id; do if [ -d "kem/$id" ]; then echo $id; fi; done`
rm -rf $obj_dir
for id in $implementations; do
  compile_algorithm $id
done

all_exports=`(echo -n '["_malloc","_free"'; for impl in $implementations; do
  echo -n ",\"_crypto_kem_${impl}_ref_keypair\""
  echo -n ",\"_crypto_kem_${impl}_ref_enc\""
  echo -n ",\"_crypto_kem_${impl}_ref_dec\""
done; echo -n ']') | sed 's/,\]/]/'`

echo "Linking"
all_objs=`find $obj_dir -type f -name '*.bc'`
emcc -std=c11 -Oz $all_objs -o $build_dir/mceliece.wasm -s EXPORTED_FUNCTIONS="$all_exports" -s ERROR_ON_UNDEFINED_SYMBOLS=0 -s WASM=1 --no-entry

echo "Converting header"
(
  echo -e "'use strict';\n"
  echo 'module.exports = {'
  cat kem/mceliece*/crypto_kem_mceliece*.h | sort | grep -P '#define crypto_kem_mceliece([0-9f]+)_ref' | sed -e 's/#define /  /g;' | sed -E 's/ ([0-9]+)/: \1,/g'
  echo '};'
) > $build_dir/mceliece_constants.js

echo "Cleaning up"
rm -rf $obj_dir
